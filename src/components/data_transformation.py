from sklearn.impute import SimpleImputer  # Handling Missing Values 
from sklearn.preprocessing import StandardScaler # Standardize features by removing the mean and scaling to unit variance.
from sklearn.preprocessing import OrdinalEncoder # Encode categorical features as an integer array.

## pipelines
from sklearn.pipeline import Pipeline, make_pipeline
from sklearn.compose import ColumnTransformer

# Imporing some necessary libraries
import numpy as np
import pandas as pd

# importing functions for logginf and exception handling
from src.logger import logging
from src.exception import CustomException
from src.utils import save_object
import sys, os

from dataclasses import dataclass

@dataclass
class DataTransformationConfig:
    preprocessor_obj_file_path = os.path.join('artifacts', 'preprocessor.pkl')

class DataTransformation:
    def _init_(self):
        self.data_transformation_config = DataTransformationConfig()

    def get_data_transformation_object(self):
        try:
            logging.info('Data transformation Initiated')

            ## categorical and Numerical Columns:
            categorical_cols = ["", "", ""]
            numerical_cols = ["", "", ""]

            ## Define teh custom ranking for each ordinal variables:


            logging.info('Data Transformation Pipeline Initiated!')

            ## Numerical Pipeline
            num_pipeline = Pipeline(
                steps=[
                    ('imputer',SimpleImputer(strategy = 'median')),
                    ('scaler', StandardScaler())
                ]
            )
            ## Categorical Pipeline
            cat_pipeline = Pipeline(
                steps=[
                    ('imputer', SimpleImputer(strategy= 'most_frequent')),
                    ('ordinalencoder', OrdinalEncoder(categories=[cat_col_1, cat_col_2])),
                    ('scaler', StandardScaler())
                ]
            )

            preprocessor = ColumnTransformer([
                # This estimator allows different columns or column subsets of the input to be transformed separately 
                # and the features generated by each transformer will be concatenated to form a single feature space.
                ('num_pipeline', num_pipeline, numerical_cols),
                ('cat_pipeline', cat_pipeline, categorical_cols)
            ])

            logging.info('Data Transformation Completed')
            return preprocessor

        ## Apply Exception Block  
        except Exception as e:
            logging.info('Exception occured in Data transformation')
            raise CustomException(e,sys)
        

    def initiate_data_transformation(self, train_data_path, test_data_path):

        try:
            ## reading training and test data to apply above defined transformation
            train_df = pd.read_csv(train_data_path)
            test_df = pd.read_csv(test_data_path)

            logging.info('Read train and test data completed!')
            logging.info(f'Train DataFrame Head : \n{train_df.head().to_string()}')
            logging.info(f'Test DataFrame Head : \n{test_df.head().to_string()}')

            logging.info('Obtaining preprocessing object:')

            preprocessing_obj = self.get_data_transformation_object()

            target_col = "Class"
            drop_col = ["Time", target_col]

            ## Dividing the dataset into independent and dependent features:
            ## Training Data
            input_feature_train_df = train_df.drop(columns=drop_col, axis=1)
            target_feature_train_df = train_df[target_col]

            ## Test Data
            input_feature_test_df = test_df.drop(columns=drop_col, axis=1)
            target_feature_test_df = test_df[target_col]

            ## Data transformation

            input_feature_train_arr = preprocessing_obj.fit_transform(input_feature_train_df)
            input_feature_test_arr = preprocessing_obj.fit_transform(input_feature_test_df)

            train_arr = np.c_[input_feature_train_arr, np.array(target_feature_train_df)]
            test_arr = np.c_[input_feature_test_arr, np.array(target_feature_test_df)]

            save_object(
                file_path=self.data_transformation_config.preprocessor_obj_file_path,
                obj=preprocessing_obj
            )

            logging.info("Applying preprocessing object on training and testing datasets.")

            return(
                train_arr,
                test_arr,
                self.data_transformation_config.preprocessor_obj_file_path
            )
        
        ## Exception Block
        except Exception as e:

            raise CustomException(e, sys)
#################################################################################################################